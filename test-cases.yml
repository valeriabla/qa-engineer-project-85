---
- summary: |
    Проверка успешной регистрации пользователя через Email
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться на сайте удобным способом
  prerequisites: |
    no-data
  test-data: |
    новый Email и пароль
  steps:
    - Переходим на страницу Sign Up
    - Вводим имя, Email
    - Вводим пароль, подтверждение пароля
    - Нажимаем кнопку "Submit"
  expected-result: |
    Пользователь успешно зарегистрирован

- summary: |
    Проверка регистрации пользователя через GitHub
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться на сайте удобным способом
  prerequisites: |
    no-data
  test-data: |
    Пользователь совершил вход в свой аккаунт GitHub
  steps:
    - Переходим на страницу Sign Up
    - Нажимаем кнопку "Submit"
  expected-result: |
    Пользователь успешно авторизован через GitHub
    
- summary: |
    Проверка регистрации пользователя через Discord
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться на сайте удобным способом
  prerequisites: |
    no-data
  test-data: |
    Пользователь совершил вход в свой аккаунт Discord
  steps:
    - Переходим на страницу Sign Up
    - Нажимаем кнопку "Submit"
  expected-result: |
    Пользователь успешно авторизован через Discord
        
- summary: |
    Проверка успешной авторизации по Email
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться на сайте удобным способом
  prerequisites: |
    no-data
  test-data: |
    Email = floral@mail.ru Пароль = 1q2w3e
  steps:
    - Переходим на страницу Sign in
    - Вводим Email
    - Вводим пароль
    - Нажимаем кнопку "Submit"
  expected-result: |
    Пользователь успешно авторизован

- summary: |
    Проверка авторизации незарегистрированного пользователя
  requirement: |
    Пользователь должен иметь возможность зарегистрироваться на сайте удобным способом
  prerequisites: |
    no-data
  test-data: |
    Email = flora@mail.ru Пароль = 1q2w3e
  steps:
    - Переходим на страницу Sign in
    - Вводим Email
    - Вводим пароль
    - Нажимаем кнопку "Submit"
  expected-result: |
    Пользователь не авторизован и видит ошибку
    
- summary: |
    Проверка создания новый игры с ботом
  requirement: |
    Пользователь должен иметь возможность создать новую игру с возможностью выбора уровня, времени, темы игры, фильтрации тем
  prerequisites: |
    no-data
  test-data: |
    no-data
  steps:
    - На главной странице нажимаем кнопку "Create a game"
    - Выбираеи уровень и тип игры (игра с ботом), время игры, выюираем тему игры или тег
    - Нажимаем кнопку "Create battle"
  expected-result: |
    Игра с ботом успешно создана
 
- summary: |
    Проверка запуска обучения
  requirement: |
    Пользователь должен иметь возможность просматривать обучение к игре
  prerequisites: |
    Это первая игра пользователя
  test-data: |
    no-data
  steps:
    - Создать игру с ботом
    - Пройти каждый шаг обучения
  expected-result: |
    Обучение закончено и отображается игра

- summary: |
    Проверка победы в игре
  requirement: |
    Пользователь должен иметь возможность выбирать язык програмирования в игре, видеть код соперника, завершать игру, перезапускать
  prerequisites: |
    no-data
  test-data: |
    Решение к игре:
    const _ = require("lodash");
    const R = require("rambda");
 
    const solution = (width, length) => {
    return width * length;
    };
 
    module.exports = solution;
  steps:
    - Создать игру с ботом по поиску площади прямоугольника
    - Пройти каждый шаг обучения
    - Выбрать язык NodeJS
    - Пишем решение к игре
    - Нажимаем кнопку Run
  expected-result: |
    Пользователь победил в игре

- summary: |
    Проверка успешного создания игры с другом
  requirement: |
    Пользователь должен иметь возможность генерировать ссылки для игры с другом
  prerequisites: |
   Пользователь 2 добавлен в друзья
  test-data: |
   В отдельной вкладке войти на сайт под пользователем 2 (другом)
   Email = test123@mail.ru Пароль = 1q2w3e
  steps:
    - На главной странице нажимаем кнопку "Create a game"
    - Выбираеи уровень и тип игры (with a friend), время игры, выюираем тему игры или тег
    - Выбираем оппонента
    - Нажимаем кнопку "Create invite"
    - Пользователь 2 принимает приглашение
  expected-result: |
    Игра с другом успешно создана

- summary: |
    Проверка мобильной версии
  requirement: |
    Сайт должен иметь удобную мобильную версию
  prerequisites: |
    Открыта панель DevTools
  test-data: |
    Устройство 1 - iphone SE
    Устройство 2 - Samsung Galaxy S20 Ultra
  steps:
    - В панеле DevTools выбрать меню адаптивности
    - В меню адаптивности выбрать устройсто 1, проверить отображение и работу сайта
    - В меню адаптивности выбрать устройсто 2, проверить отображение и работу сайта
  expected-result: |
    Сайт открыт в мобильной версии
        
- summary: |
   Проверка перехода на последнее сообщение в чате
  requirement: |
    Сайт нужно разработать с учетом удобства использования и оптимизировать для скорости работы
  prerequisites: |
    no-data
  test-data: |
    no-data
  steps:
    - На главной странице игры в строку сообщения в чате ввести любые 12 фраз
    - Перемотать в начало чата
    - Отправить еще сообщения
  expected-result: |
    В чате автоматически произойдет перемотка к последнему сообщению

- summary: |
    Проверка кроссбраузерности на Chrome
  requirement: |
    Сайт должен быть протестирован на совместимость с последними версиями браузеров
  prerequisites: |
    no-data
  test-data: |
    Браузер - Google Chrome 125.0.6422.142
  steps:
    - Выполнить авторизацию
    - Создать новую игру
  expected-result: |
    Сайт полноценно работает и выполняет основные функции
    
- summary: |
    Проверка кроссбраузерности на Firefox
  requirement: |
    Сайт должен быть протестирован на совместимость с последними версиями браузеров
  prerequisites: |
    no-data
  test-data: |
    Браузер - Firefox 127.0
  steps:
    - Выполнить авторизацию
    - Создать новую игру
  expected-result: |
    Сайт полноценно работает и выполняет основные функции
